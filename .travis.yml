language: c

os:
    - linux

dist: xenial

# We need a full clone to make sure setuptools_scm works properly
git:
    depth: false

env:
    global:
        # The following versions are the 'default' for tests, unless
        # overridden underneath. They are defined here in order to save having
        # to repeat them for all configurations.
        - PYTHON_VERSION=3.7
        - NUMPY_VERSION=stable
        - ASTROPY_VERSION=stable
        - INSTALL_CMD="pip install -e .[test]"
        - MAIN_CMD="pytest"
        - PIP_DEPENDENCIES=''
        - CONDA_DEPENDENCIES=''

jobs:
    # Don't wait for allowed failures
    fast_finish: true

    include:
        - os: linux

        # Older version
        - os: linux
          env: PYTHON_VERSION=3.6 NUMPY_VERSION=1.16 ASTROPY_VERSION=3.2.3

        # Try Astropy development version
        - os: linux
          env: PYTHON_VERSION=3.8 ASTROPY_VERSION=development

        # Security audit
        - os: linux
          env: PIP_DEPENDENCIES="bandit"
               INSTALL_CMD="" MAIN_CMD="bandit -r . -c .bandit.yaml"

        # PEP 517
        - os: linux
          env: PIP_DEPENDENCIES="pep517 twine"
               INSTALL_CMD="python -m pep517.build --source ."
               MAIN_CMD="twine check dist/*"

        # Sphinx linkcheck
        - os: linux
          env: PIP_DEPENDENCIES="sphinx"
               INSTALL_CMD="pip install -e ."
               MAIN_CMD="cd doc && make linkcheck"

        # PEP8 check
        - os: linux
          env: INSTALL_CMD="" MAIN_CMD="flake8 --count lib/stsci/tools"

    allow_failures:
        # PEP8 will fail for numerous reasons. Ignore it.
        - os: linux
          env: INSTALL_CMD="" MAIN_CMD="flake8 --count lib/stsci/tools"

before_install:

    # If there are matplotlib tests, comment these out to
    # Make sure that interactive matplotlib backends work
    # - export DISPLAY=:99.0
    # - sh -e /etc/init.d/xvfb start

install:

    # We now use the ci-helpers package to set up our testing environment.
    # This is done by using Miniconda and then using conda and pip to install
    # dependencies. Which dependencies are installed using conda and pip is
    # determined by the CONDA_DEPDENDENCIES and PIP_DEPENDENCIES variables,
    # which should be space-delimited lists of package names. See the README
    # in https://github.com/astropy/ci-helpers for information about the full
    # list of environment variables that can be used to customize your
    # environment. In some cases, ci-helpers may not offer enough flexibility
    # in how to install a package, in which case you can have additional
    # commands in the install: section below.

    - git clone git://github.com/astropy/ci-helpers.git
    - source ci-helpers/travis/setup_conda.sh

    # Upgrade to the latest version of pip to avoid it displaying warnings
    # about it being out of date.
    #- pip install --upgrade --no-deps pip

    # As described above, using ci-helpers, you should be able to set up an
    # environment with dependencies installed using conda and pip, but in some
    # cases this may not provide enough flexibility in how to install a
    # specific dependency (and it will not be able to install non-Python
    # dependencies). Therefore, you can also include commands below (as
    # well as at the start of the install section or in the before_install
    # section if they are needed before setting up conda) to install any
    # other dependencies.

script:
    - $INSTALL_CMD
    - $MAIN_CMD

after_success:
    # If coveralls.io is set up for this package, uncomment the line
    # below and replace "packagename" with the name of your package.
    # The coveragerc file may be customized as needed for your package.
    #- if [[ $MAIN_CMD == *--coverage* ]]; then coveralls --rcfile='lib/stsci/tools/tests/coveragerc'; fi
